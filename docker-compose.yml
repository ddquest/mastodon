version: "3"
services:

  db:
    restart: always
    image: postgres:alpine
    networks:
      mastodon:
    volumes:
      - mastodon_postgres:/var/lib/postgresql/data

  redis:
    restart: always
    image: redis:alpine
    networks:
      mastodon:
    volumes:
      - mastodon_redis:/data

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.nginx
    image: mastodon_frontend:alpine
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - web
      - streaming
      - chem_bot
    networks:
      mastodon:
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - certbot:/etc/letsencrypt

  chem_bot:
    restart: always
    build:
      context: ./chem_bot
      dockerfile: Dockerfile.chem_bot
    command: python /chem_bot/app.py
    ports:
      - "5000:5000"
    networks:
      mastodon:

  web:
    restart: always
    build: .
    env_file: .env.production
    command: bundle exec rails s -p 3000 -b '0.0.0.0'
    depends_on:
      - db
      - redis
    networks:
      mastodon:
        aliases:
          - mastodon_web
    volumes:
      - assets:/mastodon/public/assets
      - packs:/mastodon/public/packs
      - system:/mastodon/public/system

  streaming:
    restart: always
    build: .
    env_file: .env.production
    command: npm run start
    ports:
      - "4000:4000"
    networks:
      mastodon:
        aliases:
          - mastodon_streaming
    depends_on:
      - db
      - redis

  sidekiq:
    restart: always
    build: .
    env_file: .env.production
    command: bundle exec sidekiq -q default -q mailers -q pull -q push
    depends_on:
      - db
      - redis
    networks:
      mastodon:
    volumes:
      - system:/mastodon/public/system

  mta:
    restart: always
    image: namshi/smtp
    env_file: .env.smtp
    networks:
      mastodon:
    volumes:
      - /etc/localtime:/etc/localtime:ro

networks:
  mastodon:
    external: true

volumes:
  certbot:
    external: true
  mastodon_postgres:
  mastodon_redis:
  assets:
  packs:
  system:
